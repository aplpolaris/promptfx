/*-
 * #%L
 * tri.promptfx:promptfx
 * %%
 * Copyright (C) 2023 - 2025 Johns Hopkins University Applied Physics Laboratory
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package tri.promptfx.research

import javafx.beans.property.SimpleObjectProperty
import javafx.beans.property.SimpleStringProperty

/** Represents a research information request from the user. */
data class InfoRequest(
    val request: String,
    val timestamp: Long = System.currentTimeMillis()
) {
    override fun toString() = request
}

/** Represents the research project plan generated by the InfoPlannerAgent. */
data class ResearchProjectPlan(
    val objectives: List<String>,
    val questions: List<String>,
    val methodology: List<String>,
    val tasks: List<ResearchTask>,
    val timeline: String,
    val successCriteria: List<String>
) {
    fun summary(): String = "Plan with ${objectives.size} objectives, ${questions.size} questions, ${tasks.size} tasks"
}

/** Represents a specific research task within the plan. */
data class ResearchTask(
    val id: String,
    val name: String,
    val description: String,
    val phase: String,
    val priority: TaskPriority,
    val estimatedTime: String,
    val dependencies: List<String> = emptyList(),
    var status: TaskStatus = TaskStatus.NOT_STARTED
)

/** Represents the compiled research findings from the ResearchAgent. */
data class ResearchPack(
    val findings: List<ResearchFinding>,
    val sources: List<String>,
    val summary: String
) {
    fun totalFindings(): Int = findings.size
}

/** Individual research finding. */
data class ResearchFinding(
    val topic: String,
    val content: String,
    val source: String,
    val relevance: Double = 1.0
)

/** The final written report generated by the WritingAgent. */
data class WrittenReport(
    val title: String,
    val sections: List<ReportSection>,
    val outline: String,
    val fullText: String,
    val citations: List<String> = emptyList()
) {
    fun wordCount(): Int = fullText.split("\\s+".toRegex()).size
}

/** A section of the written report. */
data class ReportSection(
    val heading: String,
    val content: String,
    val level: Int = 1
)

/** Priority levels for research tasks. */
enum class TaskPriority { HIGH, MEDIUM, LOW }

/** Status of research tasks. */
enum class TaskStatus { NOT_STARTED, IN_PROGRESS, COMPLETED, BLOCKED }

/** Current phase of the research process. */
enum class ResearchPhase {
    PLANNING,
    RESEARCH,
    WRITING, 
    REVIEW,
    COMPLETED
}

/** Observable properties for the research workflow state. */
class ResearchWorkflowState {
    val currentPhase = SimpleObjectProperty(ResearchPhase.PLANNING)
    val infoRequest = SimpleObjectProperty<InfoRequest?>(null)
    val researchPlan = SimpleObjectProperty<ResearchProjectPlan?>(null)
    val researchPack = SimpleObjectProperty<ResearchPack?>(null)
    val writtenReport = SimpleObjectProperty<WrittenReport?>(null)
    val currentStatus = SimpleStringProperty("Ready to begin research")
    val isProcessing = SimpleObjectProperty(false)
}